<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>动效设置</title>
    <!-- 引入地图引擎库 -->
    <script src="http://192.168.82.91:8086/static/libs/include-lib-local-upgrade.js"></script>
    <!-- 天地图Token -->
    <script src="http://192.168.82.91:8086/static/assets/js/TDT-token.js"></script>
    <!-- 行业标绘相关库 -->
    <script src="http://192.168.82.91:8086/static/libs/cdn/jquery/jquery-3.7.1.min.js"></script>
    <script src="http://192.168.82.91:8086/static/libs/cdn/zondyclient/webclient-plot.min.js"></script>
    <!-- panel -->
    <script src="http://192.168.82.91:8086/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.js"></script>
    <link rel="stylesheet" href="http://192.168.82.91:8086/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://192.168.82.91:8086/static/libs/css/style.css"/>
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      // 定义视图的主要类
      let map, view, layer
      const { WebTileLayer } = zondy.layer
      const { Map } = zondy
      const { Plot } = Zondy
      const {
        SymbolManager,
        FabricLayer,
        PlotLayer2DGroup,
        PlotLayer2D,
        DrawTool,
        PlotLayer3D,
        PlotLayer3DGroup,
        TimeLine
      } = Plot
      const symbolUrl = `http://192.168.82.91:8200/Plot/plot-sample/symbolLibs/标号库a/symbolLib.json`
      const symbolOptions = {
        fontURL: `http://192.168.82.91:8200/Plot/plot-sample/fonts/`,
        baseUrl: `http://192.168.82.91:8200/Plot/plot-sample/symbolLibs/标号库a/`
      }
      let layer1,
        layer2,
        plotLayer2DGroup,
        timeline,
        drawTool,
        plotEditor,
        currentPlot

      // 初始化地图
      function init() {
        // 初始化地图视图
        initView()
        // 视图加载完毕后，初始化行业标绘
        view.on('layerview-created', () => {
          // 跳转到指定位置
          view.goTo({
            // 跳转中心点
            center: [117.19, 34.232, 30000],
            // 地图层级
            zoom: 12
          });
          // 获取引擎类型
          let type = localStorage.getItem('engine-type')
          // 创建符号管理器
          const manager = new SymbolManager(symbolUrl, symbolOptions)
          // 请求获取符号库
          manager.getSymbols().then(function () {
            //获取符号库后执行回调
            //确保符号获取完毕后，初始化标绘图层
            if (type === 'cesium') {
              // 初始化三维行业标绘
              initPlot3D()
            } else {
              // 初始化二维行业标绘
              initPlot2D()
            }
          })
        })
      }

      // 初始化二维行业标绘
      function initPlot2D() {
        // 获取引擎视图对象
        const viewer = view.getInnerView()
        // 获取overlay图层
        const canvas = new FabricLayer(viewer, PlotLayer2DGroup)
        // 创建二维图层组
        plotLayer2DGroup = canvas.getFabricCanvas()
        // 创建二维图层
        layer1 = new PlotLayer2D()
        // 开启图层可编辑
        layer1.editable = true
        // 添加图层
        plotLayer2DGroup.addLayer(layer1)
        // 创建时间轴
        $.getJSON(
          `http://192.168.82.91:8200/Plot/plot-sample/scripts/abc.json`,
          (t) => {
            timeline = new TimeLine(plotLayer2DGroup, {})
            timeline.fromJSON(t)
            // 设置默认动画
            timeline.addAnimationObject({
              animationName: '动画1',
              featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
              duration: 500,
              easing: 'Linear',
              delay: 0,
              endDelay: 0,
              loop: 10000,
              timelineOffset: 0,
              animationType: 'visible-animation'
            })
            timeline.addAnimationObject({
              animationName: '动画2',
              featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
              duration: 3000,
              easing: 'Linear',
              delay: 0,
              endDelay: 0,
              loop: 10000,
              timelineOffset: 0,
              animationType: 'grow-animation'
            })
            timeline.addAnimationObject({
              animationName: '动画3',
              featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
              duration: 500,
              easing: 'Linear',
              delay: 0,
              endDelay: 0,
              loop: 10000,
              timelineOffset: 0,
              animationType: 'scale-animation'
            })
            // 开始动画
            setTimeout(() => {
              timeline.play()
            }, 2000)
          }
        )
        layer1.pickPlot = (plot) => {
          currentPlot = plot
        }

        const rePlot = layer1.addGeoJSONObject({
          type: 'Feature',
          featureId: '44f7b761-2c93-40e7-917d-cc61a58a4175',
          properties: {
            show: true,
            symbolId: '56',
            nodeStyles: {
              path12770: {
                strokeStyle: 'rgba(255,0,0,1)'
              }
            },
            dimModAttitude: '1',
            dimModHeight: 3000
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [[117.18944441797595, 34.2390284961602]]
          }
        })
        rePlot.then((plot) => {
          currentPlot = plot
        })

        // 添加动画对象
        layer1.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            featureId: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
            symbolId: '39',
            symbolName: '撤离线'
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [
              [117.3701360274617, 34.15566255198262],
              [117.26718426641384, 34.103216223599446],
              [117.1508839238758, 34.08738778399195]
            ]
          }
        })
        layer1.pickPlot = (plot) => {
          currentPlot = plot
        }
      }

      // 初始化三维行业标绘
      function initPlot3D() {
        // 获取引擎视图对象
        const viewer = view.getInnerView()
        // 创建图层组
        const plotLayer3DGroup = new PlotLayer3DGroup(viewer)
        // 创建二维图层
        layer1 = new PlotLayer3D(Cesium, viewer, {
          //设置为贴地模式
          classificationType: 0
        })
        // 添加图层
        plotLayer3DGroup.addLayer(layer1)
        // 选取对象
        layer1.editable = true
        layer1.pickPlot = (plot) => {
          currentPlot = plot
        }
        timeline = new TimeLine(plotLayer3DGroup, {})
        // 开启图层可编辑
        layer1.editable = true

        // 添加标绘元素
        const rePlot = layer1.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            featureId: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
            symbolId: '39',
            symbolName: '撤离线'
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [
              [117.3701360274617, 34.15566255198262],
              [117.26718426641384, 34.103216223599446],
              [117.1508839238758, 34.08738778399195]
            ]
          }
        })
        // 获取当前标绘物
        rePlot.then((plot) => {
          currentPlot = plot
          // 获取uuid
          const uuid = currentPlot.getElement().getFeatureId()
          // 添加动画object
          timeline.addAnimationObject({
            animationName: '动画2',
            featureIds: uuid,
            duration: 500,
            easing: 'Linear',
            delay: 0,
            endDelay: 0,
            loop: 10000,
            timelineOffset: 0,
            animationType: 'blink-animation'
          })
          // 重置动画
          timeline.restore()
          // 开始动画
          timeline.play()
        })
      }

      function initUI() {
        const panel = new window.webclientPlot.PlotPanel('plot-show-table', {
          titleText: '动效设置',
          panelWidth: 280
        })
        const contentBody = panel.getBody()
        contentBody.style.display = 'flex'
        contentBody.style.flexDirection = 'column'

        const items = [
          {
            children: [
              {
                name: '添加闪烁动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'blink-animation'
                    })
                  }
                }
              },
              {
                name: '添加显隐动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'visible-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加属性动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 4000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'attribute-animation',
                      attrsItem: {
                        attrName: 'dimModHeight',
                        value: [3000, 2000, 6000, 3000]
                      }
                    })
                  }
                }
              },
              {
                name: '添加路径动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 3000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationCoords: [
                        [117.3701360274617, 34.15566255198262],
                        [117.26718426641384, 34.103216223599446],
                        [117.1508839238758, 34.08738778399195]
                      ],
                      animationType: 'path-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加比例动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'scale-animation'
                    })
                  }
                }
              },
              {
                name: '添加生长动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 3000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'grow-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            name: '重置动画',
            action: () => {
              timeline.restore()
            }
          },
          {
            name: '播放动画',
            action: () => {
              timeline.restore()
              timeline.play()
            }
          },
          {
            name: '暂停动画',
            action: () => {
              timeline.pause()
            }
          },
          {
            name: '清空动画',
            action: () => {
              timeline.pause()
              timeline.clear()
            }
          }
        ]

        items.forEach((item) => {
          const f = (v) => {
            const div = document.createElement('div')
            div.setAttribute('class', 'list-item')
            div.innerText = v.name
            div.addEventListener('click', v.action.bind(this))
            return div
          }
          const list = document.createElement('div')
          list.setAttribute('class', 'listdom')
          if (item.children) {
            item.children.forEach((t) => {
              list.appendChild(f(t))
            })
          } else {
            list.appendChild(f(item))
          }
          contentBody.appendChild(list)
        })
      }

      // 初始二维地图
      function initView() {
        // 初始化图层管理容器
        map = new Map()
        // 初始化地图视图对象
        view = createView('mapgis-viewer', map)
        // 创建瓦片图层
        layer = new WebTileLayer({
          // 加载经纬度的影像地图
          url: 'http://t1.tianditu.com/DataServer?T=img_c&x={col}&y={row}&l={level}',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        // 添加图层
        map.add(layer)
        // 初始化UI
        initUI()
      }
    </script>
</head>

<body onload="init();">
<div id="mapgis-viewer">
    <div id="content" style="position: relative">
        <div id="plot-show-table"></div>
    </div>
</div>
</body>
<style>
    #mapgis-viewer {
        width: 100%;
        height: 100vh;
        display: flex;
        position: relative;
    }
    #content {
        height: 100%;
        flex: 6.5;
        position: relative;
    }
    #plot-show-table {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 999;
    }
    #plot-show-table .listdom {
        font-family: Arial;
        margin-bottom: 5px;
        width: 100%;
        border-color: #1970fc;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #plot-show-table .listdom .btn,
    .span {
        display: block;
        padding: 5px 12px;
        font-size: 13px;
        font-weight: 400;
        line-height: 1.53846154;
        text-align: center;
        white-space: nowrap;
        cursor: pointer;
        color: #fff;
        background-color: #3a85c6;
        user-select: none;
        border: 1px solid transparent;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
    }
    #plot-show-table .listdom .input {
        opacity: 0;
        display: block;
        padding: 5px 12px;
        font-size: 13px;
        font-weight: 400;
        line-height: 1.53846154;
        text-align: center;
        white-space: nowrap;
        cursor: pointer;
        color: #fff;
        background-color: #3a85c6;
        user-select: none;
        border: 1px solid transparent;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
    }
    #plot-show-table .listdom .list-item {
        flex: 1;
        height: 100%;
        padding: 5px 12px;
        border: 1px solid transparent;
        border-radius: 4px;
        background-color: #3a85c6;
        cursor: pointer;
        color: #fff;
        box-sizing: border-box;
        margin: 1px;
        text-align: center;
    }
</style>
</html>
