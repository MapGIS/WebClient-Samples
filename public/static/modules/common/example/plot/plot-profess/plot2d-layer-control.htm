<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>图层控制</title>
    <!-- 引入地图引擎库 -->
    <script src="http://192.168.82.91:8086/static/libs/include-lib-local-upgrade.js"></script>
    <!-- 天地图Token -->
    <script src="http://192.168.82.91:8086/static/assets/js/TDT-token.js"></script>
    <!-- 行业标绘相关库 -->
    <script src="http://192.168.82.91:8086/static/libs/cdn/jquery/jquery-3.7.1.min.js"></script>
    <script src="http://192.168.82.91:8086/static/libs/cdn/zondyclient/webclient-plot.min.js"></script>
    <!-- panel -->
    <script src="http://192.168.82.91:8086/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.js"></script>
    <link rel="stylesheet" href="http://192.168.82.91:8086/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://192.168.82.91:8086/static/libs/css/style.css"/>
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      // 定义视图的主要类
      let map, view, layer
      const { WebTileLayer } = zondy.layer
      const { Map } = zondy
      const { Plot } = Zondy
      const {
        SymbolManager,
        FabricLayer,
        PlotLayer2DGroup,
        PlotLayer2D,
        DrawTool,
        PlotLayer3D,
        PlotLayer3DGroup
      } = Plot
      const symbolUrl = `http://192.168.82.91:8200/Plot/plot-sample/symbolLibs/标号库a/symbolLib.json`
      const symbolOptions = {
        fontURL: `http://192.168.82.91:8200/Plot/plot-sample/fonts/`,
        baseUrl: `http://192.168.82.91:8200/Plot/plot-sample/symbolLibs/标号库a/`
      }
      let layer1,
        layer2,
        plotLayer2DGroup,
        timeline,
        drawTool,
        plotEditor,
        currentPlot

      // 初始化地图
      function init() {
        // 初始化地图视图
        initView()
        // 视图加载完毕后，初始化行业标绘
        view.on('layerview-created', () => {
          // 跳转到指定位置
          view.goTo({
            // 跳转中心点
            center: [117.19, 34.232, 30000],
            // 地图层级
            zoom: 12
          });
          // 获取引擎类型
          let type = localStorage.getItem('engine-type')
          // 创建符号管理器
          const manager = new SymbolManager(symbolUrl, symbolOptions)
          // 请求获取符号库
          manager.getSymbols().then(function () {
            //获取符号库后执行回调
            //确保符号获取完毕后，初始化标绘图层
            if (type === 'cesium') {
              // 初始化三维行业标绘
              initPlot3D()
            } else {
              // 初始化二维行业标绘
              initPlot2D()
            }
          })
        })
      }

      // 初始化二维行业标绘
      function initPlot2D() {
        // 获取引擎视图对象
        const viewer = view.getInnerView()
        // 获取overlay图层
        const canvas = new FabricLayer(viewer, PlotLayer2DGroup)
        // 创建二维图层组
        plotLayer2DGroup = canvas.getFabricCanvas()
        // 创建二维图层
        layer1 = new PlotLayer2D()
        layer2 = new PlotLayer2D()
        // 设置图层标绘元素缩放比，默认为1
        layer1.setPlotSize(1)
        layer2.setPlotSize(1)
        // 添加图层
        plotLayer2DGroup.addLayer(layer1)
        plotLayer2DGroup.addLayer(layer2)
        // 读取保存的标绘物数据
        layer1.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            symbolId: '56',
            nodeStyles: {
              path12770: {
                strokeStyle: 'rgba(255,0,0,1)'
              }
            }
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [[117.18944441797595, 34.2390284961602]]
          }
        })

        // 读取保存的标绘物数据
        layer2.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            symbolId: '56',
            nodeStyles: {
              path12770: {
                strokeStyle: 'rgba(0,0,0,1)'
              }
            }
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [[117.18944441797595, 34.2390284961602]]
          }
        })
      }

      // 初始化三维行业标绘
      function initPlot3D() {
        // 获取引擎视图对象
        const viewer = view.getInnerView()
        // 创建图层组
        const plotLayer3DGroup = new PlotLayer3DGroup(viewer)
        // 创建二维图层
        layer1 = new PlotLayer3D(Cesium, viewer, {
          //设置为贴地模式
          classificationType: 0
        })
        layer2 = new PlotLayer3D(Cesium, viewer, {
          //设置为贴地模式
          classificationType: 0
        })
        // 设置图层标绘元素缩放比，默认为1
        layer1.setPlotSize(1)
        layer2.setPlotSize(1)
        // 添加图层
        plotLayer3DGroup.addLayer(layer1)
        plotLayer3DGroup.addLayer(layer2)
        // 读取保存的标绘物数据
        layer1.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            symbolId: '56',
            nodeStyles: {
              path12770: {
                strokeStyle: 'rgba(255,0,0,1)'
              }
            }
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [[117.18944441797595, 34.2390284961602]]
          }
        })

        // 读取保存的标绘物数据
        layer2.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            symbolId: '56',
            nodeStyles: {
              path12770: {
                strokeStyle: 'rgba(0,0,0,1)'
              }
            }
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [[117.18944441797595, 34.2390284961602]]
          }
        })
      }

      function initUI() {
        const panel = new window.webclientPlot.PlotPanel('plot-show-table', {
          titleText: '图层控制',
          panelWidth: 200
        })
        const contentBody = panel.getBody()
        contentBody.style.display = 'flex'
        contentBody.style.flexDirection = 'column'

        const btn1 = document.createElement('button')
        btn1.setAttribute('class', 'btn')
        let btn1_isAllowEdit = false
        btn1.innerText = `图层1编辑状态${btn1_isAllowEdit ? '开启' : '关闭'}`
        btn1.onclick = () => {
          btn1_isAllowEdit = !btn1_isAllowEdit
          layer1.editable = btn1_isAllowEdit
          btn1.innerText = `图层1编辑状态${btn1_isAllowEdit ? '开启' : '关闭'}`
        }
        contentBody.appendChild(btn1)

        const btn2 = document.createElement('button')
        btn2.setAttribute('class', 'btn')
        let btn2_isAllowEdit = false
        btn2.innerText = `图层2编辑状态${btn2_isAllowEdit ? '开启' : '关闭'}`
        btn2.onclick = () => {
          btn2_isAllowEdit = !btn2_isAllowEdit
          layer2.editable = btn2_isAllowEdit
          btn2.innerText = `图层2编辑状态${btn2_isAllowEdit ? '开启' : '关闭'}`
        }
        contentBody.appendChild(btn2)

        const btn1_1 = document.createElement('button')
        btn1_1.setAttribute('class', 'btn')
        let btn1_isAllowVisible = true
        btn1_1.innerText = `图层1可见状态${
          btn1_isAllowVisible ? '开启' : '关闭'
        }`
        btn1_1.onclick = () => {
          btn1_isAllowVisible = !btn1_isAllowVisible
          layer1.setVisible(btn1_isAllowVisible)
          btn1_1.innerText = `图层1可见状态${
            btn1_isAllowVisible ? '开启' : '关闭'
          }`
        }
        contentBody.appendChild(btn1_1)

        const btn2_2 = document.createElement('button')
        btn2_2.setAttribute('class', 'btn')
        let btn2_isAllowVisible = true
        btn2_2.innerText = `图层2可见状态${
          btn2_isAllowVisible ? '开启' : '关闭'
        }`
        btn2_2.onclick = () => {
          btn2_isAllowVisible = !btn2_isAllowVisible
          layer2.setVisible(btn2_isAllowVisible)
          btn2_2.innerText = `图层2可见状态${
            btn2_isAllowVisible ? '开启' : '关闭'
          }`
        }
        contentBody.appendChild(btn2_2)

        const btn3 = document.createElement('button')
        btn3.setAttribute('class', 'btn')
        btn3.innerText = `获取所有图层`
        btn3.onclick = () => {
          console.log('当前所有图层', plotLayer2DGroup.getLayers())
        }
        contentBody.appendChild(btn3)

        const btn4 = document.createElement('button')
        btn4.setAttribute('class', 'btn')
        btn4.innerText = `清空所有图层`
        btn4.onclick = () => {
          ;[layer1, layer2].forEach((layer) => {
            plotLayer2DGroup.removeLayer(layer)
          })
        }
        contentBody.appendChild(btn4)

        const btn5 = document.createElement('button')
        btn5.innerText = '切换图层顺序'
        btn5.setAttribute('class', 'btn')
        let flag = false
        btn5.onclick = () => {
          flag = !flag
          plotLayer2DGroup.bringObjectsByLayerToFront(flag ? layer1 : layer2)
        }
        contentBody.appendChild(btn5)
      }

      // 初始二维地图
      function initView() {
        // 初始化图层管理容器
        map = new Map()
        // 初始化地图视图对象
        view = createView('mapgis-viewer', map)
        // 创建瓦片图层
        layer = new WebTileLayer({
          // 加载经纬度的影像地图
          url: 'http://t1.tianditu.com/DataServer?T=img_c&x={col}&y={row}&l={level}',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        // 添加图层
        map.add(layer)
        // 初始化UI
        initUI()
      }
    </script>
</head>

<body onload="init();">
<div id="mapgis-viewer">
    <div id="content" style="position: relative">
        <div id="plot-show-table"></div>
    </div>
</div>
</body>
<style>
    #mapgis-2d-viewer {
        width: 100%;
        height: 100vh;
        display: flex;
        position: relative;
    }
    #content {
        height: 100%;
        flex: 6.5;
        position: relative;
    }
    #plot-show-table {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 999;
    }
    #plot-show-table .btn {
        display: block;
        padding: 5px 12px;
        margin-bottom: 5px;
        font-size: 13px;
        font-weight: 400;
        line-height: 1.53846154;
        text-align: center;
        white-space: nowrap;
        cursor: pointer;
        color: #fff;
        background-color: #3a85c6;
        border-color: #1970fc;
        user-select: none;
        border: 1px solid transparent;
        border-radius: 4px;
    }
</style>
</html>
