<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>地质体剖面</title>
    <!--加载Cesium库-->
    <script src="http://192.168.82.91:8086/static/libs/cdn/cesium/Cesium.js"></script>
    <link
      rel="stylesheet"
      href="http://192.168.82.91:8086/static/libs/cdn/cesium/Widgets/widgets.css"
    />
    <!--plugin脚本库-->
    <script src="http://192.168.82.91:8086/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://192.168.82.91:8086/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://192.168.82.91:8086/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://192.168.82.91:8086/static/libs/cdn/layui/layui.js"></script>
    <link
      rel="stylesheet"
      href="http://192.168.82.91:8086/static/libs/cdn/layui/css/layui.css"
    />
    <!--示例公共样式-->
    <link
      rel="stylesheet"
      href="http://192.168.82.91:8086/static/libs/css/style.css"
    />
    <link
      rel="stylesheet"
      href="http://192.168.82.91:8086/static/libs/css/tool.css"
    />
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer
      //绘制工具
      let drawElement = null
      //模型
      let modelLyr = null

      // 添加竖剖面
      function addVerticalSection() {
        //先移除上次的切面
        removeSection()
        // 创建交互绘制工具
        drawElement = new zondy.cesium.DrawElement(viewer)
        drawElement.startDrawingPolyline({
          callback: function (result) {
            let positions = result.positions
            for (let i = 0; i < positions.length - 1; ++i) {
              let geom = new Cesium.SectionPlaneGeometry({
                positions: [positions[i], positions[i + 1]],
                topHeight: 100,
                bottomHeight: 1200
              })
              // 设置只显示剖面,可以配合CuttingTool工具同时显示模型和剖面实现封边效果
              modelLyr.sectionOnly(true)
              // 向m3d图层设置剖面几何
              modelLyr.addSectionGeometry({ geometry: geom })
            }
            drawElement.stopDrawing()
          }
        })
      }
      // 添加横剖面
      function addHorizontalSection() {
        //先移除上次的切面
        removeSection()
        // 创建交互绘制工具
        drawElement = new zondy.cesium.DrawElement(viewer)
        drawElement.startDrawingPolyline({
          callback: function (result) {
            var positions = result.positions
            for (var i = 0; i < positions.length - 1; ++i) {
              var geom = new Cesium.SectionPlaneGeometry({
                positions: [positions[i], positions[i + 1]],
                // 设置topHeight和bottomHeight相同值，避免因向量方向导致正反面裁剪的深度不一致
                topHeight: 1200,
                bottomHeight: 1200,
                isHorizontal: true
              })
              // 设置只显示剖面,可以配合CuttingTool工具同时显示模型和剖面实现封边效果
              modelLyr.sectionOnly(true)
              // 向m3d图层设置剖面几何
              modelLyr.addSectionGeometry({ geometry: geom })
            }
            drawElement.stopDrawing()
          }
        })
      }

      function addHorizontalSectionByHeight() {
        //先移除上次的切面
        removeSection()
        // 设置只显示剖面,可以配合CuttingTool工具同时显示模型和剖面实现封边效果
        modelLyr.sectionOnly(true)
        modelLyr.addSectionGeometry({
          geometry: Cesium.SectionPlaneGeometry.createPlaneGeometryByHeight(
            [modelLyr],
            -500
          )
        })
      }

      function addHorizontalSectionByPositions() {
        //先移除上次的切面
        removeSection()
        let positions = [
          {
            x: -2560899.547952669,
            y: 4898389.417259944,
            z: 3170871.8996368214
          },
          {
            x: -2561130.42234208,
            y: 4898620.797173124,
            z: 3171051.5132434503
          },
          {
            x: -2560605.882524569,
            y: 4897812.988922655,
            z: 3171999.5037288275
          },
          {
            x: -2560836.7568747043,
            y: 4898044.36864775,
            z: 3172179.1172290794
          }
        ].map(function (position) {
          return new Cesium.Cartesian3(position.x, position.y, position.z)
        })

        // 设置只显示剖面,可以配合CuttingTool工具同时显示模型和剖面实现封边效果
        modelLyr.sectionOnly(true)
        modelLyr.addSectionGeometry({
          geometry: Cesium.SectionPlaneGeometry.createPlaneGeometryByPositions(
            positions[0],
            positions[1],
            positions[2],
            positions[3]
          )
        })
      }

      // 移除剖面
      function removeSection() {
        // 移除剖面几何
        if (Cesium.defined(modelLyr)) {
          modelLyr.removeAllSectionGeometry()
        }

        // 停止绘制工具
        if (Cesium.defined(drawElement)) {
          drawElement.stopDrawing()
          drawElement = undefined
        }

        // 禁止点选
        viewer.screenSpaceEventHandler.removeInputAction(
          Cesium.ScreenSpaceEventType.LEFT_CLICK
        )
      }

      // 开启点选
      function enablePick() {
        // 监听鼠标点击事件,进行模型拾取高亮
        let highlightColor = new Cesium.Color(1.0, 1.0, 0.0, 0.6)
        let leftClickHandler1 = function onLeftClick(movement) {
          let oid = viewer.scene.pickOid(movement.position)
          modelLyr.pickedOid = oid
          modelLyr.pickedColor = highlightColor
        }

        // 获取属性值
        let leftClickHandler2 = function onLeftClick(movement) {
          const feature = viewer.scene.pick(movement.position)
          if (feature instanceof Cesium.Cesium3DTileFeature) {
            const propertyIds = feature.getPropertyIds()
            console.log('propertyIds', propertyIds)

            for (let i = 0; i < propertyIds.length; ++i) {
              const propertyId = propertyIds[i]
              console.log(`${propertyId}: ${feature.getProperty(propertyId)}`)
            }
          }
        }

        const currentCesiumVersion = localStorage.getItem(
          'currentCesiumVersion'
        )

        if (currentCesiumVersion === '10.7.2.10') {
          viewer.screenSpaceEventHandler.setInputAction(
            leftClickHandler1,
            Cesium.ScreenSpaceEventType.LEFT_CLICK
          )
        } else {
          viewer.screenSpaceEventHandler.setInputAction(
            leftClickHandler2,
            Cesium.ScreenSpaceEventType.LEFT_CLICK
          )
        }
      }

      // 添加模型数据
      function addModel() {
        let url =
          'http://192.168.82.91:8089/igs/rest/services/Scene/地质体模型/SceneServer'
        let igsSceneLayer = new zondy.layer.IGSSceneLayer({
          url: url,
          // 设置场景初始化参数
          scenes: [
            {
              // 设置子图层初始化参数
              sublayers: [
                {
                  // 子图层id
                  id: '0',
                  // 子图层初始化参数
                  extensionOptions: {
                    // 开启自动跳转
                    autoReset: true,
                    // 如果后续会addSectionGeometry方法给m3d图层设置剖面设置为true,在m3d加载时统计oid等信息支持剖面的拾取高亮
                    hasSectionGeometry: true
                  }
                }
              ]
            }
          ]
        })
        map.add(igsSceneLayer)
        // 图层加载完毕
        igsSceneLayer.on('layerview-created', function (result) {
          let layer = sceneView.getInnerLayer(result.layer)
          modelLyr = Array.isArray(layer) ? layer[0] : layer
        })
      }

      //初始化球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        //为了更好的展示，去掉地球
        viewer.scene.globe.show = false
        // 针对cesium10.7.4.10版本隐藏大气环境光
        if (viewer.scene.skyAtmosphere) {
          viewer.scene.skyAtmosphere.show = false
        }
        if (viewer.scene.sun.show) {
          viewer.scene.sun.show = false
        }
        if (viewer.scene.moon.show) {
          viewer.scene.moon.show = false
        }
        if (viewer.scene.globe.showGroundAtmosphere) {
          viewer.scene.globe.showGroundAtmosphere = false
        }
      }

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //三维试图类构造完毕，添加模型
        addModel()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" style="width: 440px">
      <div style="display: flex">
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-normal"
          onclick="addVerticalSection()"
        >
          添加竖面
        </button>
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-normal"
          onclick="addHorizontalSection()"
        >
          添加横面
        </button>
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-normal"
          onclick="addHorizontalSectionByHeight()"
        >
          添加横面(统一高度)
        </button>
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-normal"
          onclick="addHorizontalSectionByPositions()"
        >
          添加横面(控制点)
        </button>
      </div>
      <div style="display: flex; margin-top: 10px">
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-normal"
          onclick="enablePick()"
        >
          开启点选
        </button>
        <button
          type="button"
          class="layui-btn layui-btn-sm layui-btn-danger"
          onclick="removeSection()"
        >
          移除剖面
        </button>
      </div>
    </div>
    <style></style>
  </body>
</html>
